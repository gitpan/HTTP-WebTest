# This is a -*-perl-*- source file

# $Id: WebTest.pm.in,v 1.9 2002/04/08 21:51:57 m_ilya Exp $

package HTTP::WebTest;

$VERSION = '1.99_05';
# workaround for warning caused by underscore char in $VERSION
$VERSION = eval $VERSION;

# actual content of HTTP::WebTest package is in HTTP::WebTest::API
require HTTP::WebTest::API;

=head1 NAME

HTTP::WebTest - Test remote URLs or local web files

=head1 SYNOPSIS

    use HTTP::WebTest;

    my $webtest = new HTTP::WebTest;

    # run test from file
    $webtest->run_wtscript('script.wt');

    # or (to pass test parameters as method arguments)
    $webtest->run_tests($tests);

=head1 DESCRIPTION

=head2 Beta software warning

THIS IS A BETA VERSION THAT IS A REWRITE OF VERSION 1.07 AND IS PROBABLY NOT
AS WELL DEBUGGED AS VERSION 1.07. Version 1.07 can be downloaded at
http://search.cpan.org/search?dist=HTTP-WebTest-1.07

=head2 Introduction

This module runs tests on remote URLs or local web files containing
Perl/JSP/HTML/JavaScript/etc. and generates a detailed test
report. This module can be used "as-is" or its functionality can be
extended using plugins. Plugins can define test types and provide
additional report capabilities. This module comes with a set of
default plugins but can be easily extended with third party plugins.

The L<wt|wt> script is provided for running C<HTTP::WebTest> from the
command line.

The test specifications can be read from a parameter file in wtscript
format or input as method arguments. If you are testing a local file,
Apache is started on a private/dynamic port with a configuration file
in a temporary directory.

The test results can be displayed on the terminal, directed to a file,
stored in a scalar variable. The test results can also be emailed.
The report can be modified and extended using report plugins.

Each URL/web file is tested by fetching it from the web server using a
local instance of an HTTP user agent. The basic test is simply whether
or not the fetch was successful. You may also test using literal
strings or regular expressions that are either required to exist or
forbidden to exist in the fetched page. You may also specify tests for
the minimum and maximum number of bytes in the returned page. You may
also specify tests for the minimum and maximum web server response
time.

Data flow for C<HTTP::WebTest> using a remote URL:

          --------------              -------------
          |            |              |           |
          | Input      |------------->|  WebTest  |
          | parameters |              |           |
          |            |              -------------
          --------------                  |   ^
                                          |   |
                                          V   |
          -------------               ------------
          |           |    request    |          |
          | Remote    |<--------------|   HTTP   |
          | webserver |-------------->|   user   |
          |           |    response   |   agent  |
          -------------               |          |
                                      ------------

Data flow diagram for C<HTTP::WebTest> using a local web file:

          --------------           ---------------------
          |            |           |                   |
          | Input      |           |  Web page code    |
          | parameters |           |  (Perl/HTML/etc.) |
          |            |           |                   |
          --------------           ---------------------
                |                            |
                |  ---------------------------
                |  |
                V  V              ------------------------
          -------------           |                      |
          |           |---------->| Temporary Apache     |
          |  WebTest  |           | directories (htdocs, |
          |           |<----------| conf, logs)          |
          -------------           |                      |
              |  ^                ------------------------
              |  |                        |    ^
              V  |                        V    |
          ------------             ----------------------
          |          |   request   |                    |
          |   HTTP   |------------>| Temporary local    |
          |   user   |             | instance of Apache |
          |   agent  |<------------|                    |
          |          |   response  ----------------------
          ------------

=head2 Getting Started

This module has complex functionality, but using it to run simple
tests is simple. Create a file of test parameters in the
L<wtscript format|Running HTTP::WebTest using a parameter file> and use the
L<wt|wt> program to process the file using the command C<wt
filename>. The only required parameters are C<test_name> and C<url>.

This document describes:

=over 4

=item *

How tests can be specified. See section L<TEST SPECIFICATION|TEST
SPECIFICATION>.

=item *

All test parameters supported by core C<HTTP::WebTest>
plugins. See section L<TEST PARAMETERS|TEST PARAMETERS>.

=back

See L<"perldoc wt"|wt> for documentation on the wt program.

Other useful documentation is:

=over 4

=item *

L<perldoc HTTP::WebTest::Cookbook|HTTP::WebTest::Cookbook> - examples
of wtscript files and examples of C<HTTP::WebTest> API usage.

=item *

L<perldoc HTTP::WebTest::API|HTTP::WebTest::API> - full documentaion
on API of C<HTTP::WebTest>.

=item *

L<perldoc HTTP::WebTest::Plugins|HTTP::WebTest::Plugins> - for
developers of C<HTTP::WebTest> plugins.

=back

=head1 TEST SPECIFICATION

The test specifications can be read from a parameter file (in the
wtscript format described below) or passed as method arguments as an
array of hashes.

=head2 Running HTTP::WebTest using a parameter file

C<HTTP::WebTest> can read test specification from file
in format called as C<wtscript>.

Tests defined by wtscript file can be
run either using Perl API of C<HTTP::WebTest>

    use HTTP::WebTest;

    my $webtest = new HTTP::WebTest;
    $webtest->run_wtscript('script.wt');

or by using program L<wt|wt> supplied with this module.

If you are running dozens of tests, you may want to divide them into
several parameter files. This will organize the tests and reduce the
size of the output and e-mail messages. However, cookies passed to or
received from the web server(s) are not shared between tests in
different parameter files.

=head3 File format

The wtscript file is a text file containing global parameters and 
test blocks containing test block parameters.  A test block begins with
a test_name parameter and ends with an end_test directive.  The order of
the parameters and test blocks is arbitrary.

Test block parameters MUST occur between a test_name parameter and an
end_test directive. (Test block parameters affect only an individual
test.) Global parameters must NOT occur between a test_name parameter
and an end_test directive. (This requirement does not apply to
certain parameters that are both global and test block parameters.)

The following lines are ignored:

=over 4

=item *

lines consisting of nothing but white space (blanks or tabs)

=item *

lines beginning with a number sign (C<#>)

=item *

lines beginning with white space (blanks or tabs) followed by a number
sign

=back

Parameters are either scalar (single-valued) or lists (single or
multi-valued).

You can specify scalar parameters using forms such as:

    name=value
    name =
           value
    name = 'value'

You can specify list parameters using forms such as:

    name = ( first value
             second value )
    name=( first value => second value
           third value => fourth value
         )
    name = ( first value => second value )
    name = (
             'first value'
             'second value' )
    name= (
             first value
             second value
             third value => 'fourth value'
          )
    name =
           ( first value
             'second value' )
    name = (
             'first value'
             'second value'
           )

You can specify a null (placeholder) value using '' or "".  Within single
or double quotes, the usual Perl string quoting rules apply.  Thus, single
quotes mean that all enclosed characters are interpreted literally: '\n'
is backslash-n rather than a newline character.  Double quotes mean that
Perl metasymbols are interpreted: "\n\t" is a newline and a tab.

Also it is possible to specify Perl code instead of scalar, instead of
list parameter value or instead of element of list paramater. Curly
brackets are used to denote Perl code inside wtscript files.  This
code will be evaluated during test run.

C<HTTP::WebTest> compiles this Perl code as anonymous subroutines
which are called during test run when value of corresponding test
parameters are required. When these subroutines are called
C<HTTP::WebTest> object is passed to them.

Some examples of syntax:

    # scalar value
    name = { 1 + 1 }

    # list value (Perl code should return array reference)
    name = { [ a => 'b', c => 'd' ] }

    # element of list value
    name = (
             'first value'
             { "first " . "value" }
           )

    # accessing HTTP::WebTest object
    name = { my $webtest = shift; ..... }

=head3 Examples of wtscript files

The parameters below specify tests of a local file and a remote URL.
The tests specified by the C<text_forbid> parameter apply to both the
"RayCosoft home page" and the "Yahoo home page" tests. Hence, if
either returned page contains one of the case-insensitive strings in
text_forbid, the test fails. If any test fails or the fetch of the URL
fails, an e-mail will be sent to tester@unixscripts.com.


    apache_exec = /usr/sbin/apache
    ignore_case = yes
    mail = errors
    mail_addresses = ( tester@unixscripts.com )
    mail_server = mailhost.unixscripts.com
    text_forbid = ( Premature end of script headers
                    an error occurred while processing this directive
                  )

    test_name = 'RayCosoft home page (static)'
        file_path = ( raycosoft_home.html => . )
        text_require = (
            <a href="/dept/peopledev/new_employee/"><font color="#0033cc">
            <a href="https://www.raycosoft.com/"><font color=
                       )
    end_test

    test_name = Yahoo home page
        url = www.yahoo.com
        text_require = ( <a href=r/qt>Quotations</a>...<br> )
        min_bytes = 13000
        max_bytes = 99000
        min_rtime = 0.010
        max_rtime = 30.0
    end_test

The parameters below specify a test of a local file containing Perl
code using the L<Apache::ASP|Apache::ASP> module. The C<includes.htm>
file requires five include files and two Perl modules, which are
copied using the C<include_file_path> parameter.

    apache_exec = /usr/sbin/apache
    ignore_case = yes
    include_file_path = ( footer.inc => htdocs/apps/myapp/inc
                          header.inc => htdocs/apps/myapp/inc
                          head.inc   => htdocs/apps/myapp/inc
                          go.script  => htdocs/shared/includes
                          go.include => htdocs/shared/includes
                          ../utils/DBconn.pm  => lib/perl/utils
                          ../utils/Window.pm  => lib/perl/utils
                        )

    test_name = includes.htm
        file_path = ( includes.htm => apps/myapp )
        min_bytes = 33000
        max_bytes = 35000
        text_require = ( input type=hidden name=control value= )
        text_forbid  = ( Premature end of script headers
                         an error occurred while processing this directive
                       )
    end_test

=head2 Calling HTTP::WebTest from a Perl program

If you are using Perl API of C<HTTP::WebTest> then the test parameters
can be defined in form of array of hashes.

Each hash in array defines tests for one URL or local web file. Keys
in hashes are test parameter names and values in hashes are values of
test parameters. Additionally, optional global test parameters can be
passed in a hash passed as the second argument.

Instead of test parameter values subroutine references can be
specified. Referenced subroutines are called during test run when
values of corresponding test parameters are required. When called
these subroutines get C<HTTP::WebTest> object passed to them.

Tests can be run as

    use HTTP::WebTest;

    my $webtest = new HTTP::WebTest;
    $webtest->run_tests(
                        [ # test 1
                          { param1 => value1,
                            param2 => value2 },
                          # test 2
                          { param1 => value1,
                            param2 => value2 },
                        ],
                        { global_param1 => value1,
                          global_param2 => value2 }
                       );

=head3 Example

This Perl script tests Yahoo home page and sends full test report to
C<tester@unixscripts.com>.

    use HTTP::WebTest;

    my $tests = [
                 { name         => 'Yahoo home page',
                   url          => 'http://www.yahoo.com',
                   text_require => [ '<a href=r/qt>Quotations</a>...<br>' ],
                   min_bytes    => 13000,
                   max_bytes    => 99000,
                 }
                ];

    my $params = { mail_server    => 'mailhost.unixscripts.com',
                   mail_addresses => [ 'tester@unixscripts.com' ],
                   mail           => 'all',
                   ignore_case    => 'yes',
                 };

    $webtest->run_tests($tests, $params);

=head1 PLUGIN MODULES

=head2 Core Plugin Modules

C<HTTP::WebTest> provides a number of core plugin modules which are
loaded by default:

=over 4

=item L<HTTP::WebTest::Plugin::Apache>

This plugin provides support for local web file test mode.

=item L<HTTP::WebTest::Plugin::ContentSizeTest>

This plugin provides size checks of HTTP response bodies.

=item L<HTTP::WebTest::Plugin::Cookies>

This plugin provides means to control sending and recieve cookies.

=item L<HTTP::WebTest::Plugin::DefaultReport>

Default test report plugin.

=item L<HTTP::WebTest::Plugin::Loader>

This plugin allows to load external plugin modules.

=item L<HTTP::WebTest::Plugin::ResponseTimeTest>

This plugin provides support for response time tests.

=item L<HTTP::WebTest::Plugin::SetRequest>

This plugin initializes test HTTP requests.

=item L<HTTP::WebTest::Plugin::StatusTest>

This plugin checks HTTP response statuses.

=item L<HTTP::WebTest::Plugin::TextMatchTest>

This plugin provides test parameters which allow to check body of HTTP
responses.

=back

Information about test parameters supported by core plugins is
summarized below in section L<TEST PARAMETERS|TEST PARAMETERS>.

=head2 Other Plugin Modules Bundled With HTTP::WebTest

Following plugin modules come with HTTP::WebTest but they are not
loaded by default. They should be loaded using global test parameter
C<plugins> when needed.

=over 4

=item L<HTTP::WebTest::Plugin::HarnessReport>

This report plugin can generate L<Test::Harness|Test::Harness>
compatible test reports.

=item L<HTTP::WebTest::Plugin::Hooks>

This plugin allows to define callback test parameters which are
evaluated at specific time of L<HTTP::WebTest> test run. These test
parameters can define user-defined checks.

=back

See documentation on these modules for more information.

=head2 Writting Plugin Modules

L<perldoc HTTP::WebTest::Plugins|HTTP::WebTest::Plugins> contains
information needed for L<HTTP::WebTest|HTTP::WebTest> plugin
developers.

=head1 TEST PARAMETERS

Most parameters can be used both as global and as test block
parameters. If you specify such parameter as global its value applies
to all test blocks. Value of parameter specified as global can be
overriden individually in each test block by specifying this parameter
with different values in test blocks.

Parameters marked as I<GLOBAL PARAMETER> can be used only as global
and it cannot be overriden in test blocks.

=for pod_merge replace params

Content of this section should be autogenerated from POD documentation
in plugin modules. Everything from this point till next =cut will be
replaced with autogenerated documentation.

=for pod_merge copy params

=head2 end_test

It is not really test parameter but a part of
L<wtscript format|Running HTTP::WebTest using a parameter file>.
It marks end of test block.

=cut

=for pod_merge replace apache

Content of this section should be autogenerated from POD documentation
in Apache plugin module. Everything from this point till next =cut
will be replaced with autogenerated documentation.

=cut

=head1 RESTRICTIONS / BUGS

This module have been tested only on Unix (e.g., Solaris, Linux, AIX,
etc.) but it should work on Win32 systems.

Local file tests don't work on Win32 systems.

The module's HTTP requests time out after 3 minutes (the default value
for L<LWP::UserAgent|LWP::UserAgent>). If the C<file_path> parameter is
specified, Apache must be installed.

=head1 SUPPORT

Please email bug reports, suggestions, questions, etc. to
C<HTTP::WebTest> maillist
C<http-webtest-general@lists.sourceforge.net>. You can sign up at
http://lists.sourceforge.net/lists/listinfo/http-webtest-general.

=head1 AUTHORS

Richard Anderson <richard@richard-anderson.org> have wrote
C<HTTP::WebTest 1.xx>.

Ilya Martynov <ilya@martynov.org> made rewrite of
C<HTTP::WebTest>. New version of C<HTTP::WebTest> have introduced
extended API and plugin based architecture.

Please don't email authors directly. Use C<HTTP::WebTest> maillists.

=head1 COPYRIGHT

Copyright (c) 2000-2001 Richard Anderson. All rights reserved.

Copyright (c) 2001,2002 Ilya Martynov. All rights reserved.

This module is free software. It may be used, redistributed and/or
modified under the terms of the Perl Artistic License.

=head1 SEE ALSO

L<HTTP::WebTest::Cookbook|HTTP::WebTest::Cookbook>

L<HTTP::WebTest::API|HTTP::WebTest::API>

L<HTTP::WebTest::Plugins|HTTP::WebTest::Plugins>

L<wt|wt>

=cut

1;
